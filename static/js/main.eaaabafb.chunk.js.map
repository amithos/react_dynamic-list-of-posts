{"version":3,"sources":["components/Loader/Loader.jsx","api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["Loader","className","request","endpoint","options","fetch","then","response","ok","json","Promise","reject","Error","statusText","result","data","getPosts","PostsList","selectedUserId","selectedPostId","setSelectedPostId","useState","posts","setPosts","isPostOpen","setPostOpen","useEffect","loadedPosts","filter","post","userId","length","map","key","id","title","type","onClick","deleteComment","commentId","method","addComment","url","headers","body","JSON","stringify","NewCommentForm","onRefreshDetails","name","setName","email","setEmail","setBody","setValue","event","setter","target","value","onSubmit","preventDefault","postId","placeholder","onChange","PostDetails","details","setDetails","comments","setComments","isLoading","setLoading","isCommentsVisible","setCommentsVisible","needRefresh","setRefresh","deactivateLoader","refresh","loadAllDetails","comment","getPostComments","App","setSelectedUserId","Boolean","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eaaabafb.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate-api.herokuapp.com/';\n\nexport function request(endpoint, options) {\n  return fetch(`${BASE_URL}${endpoint}`, options)\n    .then((response) => {\n      if (!response.ok) {\n        return Promise.reject(new Error('Error: ', response.statusText));\n      }\n\n      return response.json();\n    })\n    .then(result => result.data);\n}\n\nexport const remove = elementURL => request(elementURL, { method: 'DELETE' });\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8',\n  },\n  body: JSON.stringify(data),\n});\n","import { request } from './api';\n\nconst postsEndpoint = 'posts/';\n\nexport const getPosts = () => request(postsEndpoint);\n\nexport const getUserPosts = userId => (\n  request(postsEndpoint)\n    .then(posts => posts.filter(post => post.userId === userId))\n);\n\nexport const getPostDetails = postId => request(`${postsEndpoint}${postId}`);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Loader } from '../Loader';\n\nimport { getPosts } from '../../api/posts';\n\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  selectedUserId,\n  selectedPostId,\n  setSelectedPostId,\n}) => {\n  const [posts, setPosts] = useState([]);\n  const [isPostOpen, setPostOpen] = useState(false);\n\n  useEffect(() => {\n    getPosts().then(setPosts);\n  }, []);\n\n  useEffect(() => {\n    getPosts()\n      .then((loadedPosts) => {\n        if (selectedUserId === '0') {\n          return loadedPosts;\n        }\n\n        return loadedPosts.filter(post => post.userId === +selectedUserId);\n      })\n      .then(setPosts);\n  }, [selectedUserId]);\n\n  const openPost = () => setPostOpen(true);\n  const closePost = () => setPostOpen(false);\n\n  return (\n    <>\n      { !posts.length ? (\n        <Loader />\n      ) : (\n        <div className=\"PostsList\">\n          <h2>Posts:</h2>\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li\n                key={post.id}\n                className=\"PostsList__item\"\n              >\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.title}\n                </div>\n\n                {(isPostOpen && selectedPostId === post.id) ? (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => {\n                      closePost();\n                      setSelectedPostId(0);\n                    }}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => {\n                      openPost();\n                      setSelectedPostId(post.id);\n                    }}\n                  >\n                    Open\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )\n    }\n    </>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.string.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  setSelectedPostId: PropTypes.func.isRequired,\n};\n","import { request, remove, post } from './api';\n\nconst commentsEndpoint = 'comments/';\n\nexport const getPostComments = postId => request(commentsEndpoint)\n  .then(comments => comments.filter(\n    comment => comment.postId === postId,\n  ));\n\nexport const deleteComment\n  = commentId => remove(`${commentsEndpoint}${commentId}`);\n\nexport const addComment = data => post(commentsEndpoint, data);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { addComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ selectedPostId, onRefreshDetails }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const setValue = (event, setter) => {\n    setter(event.target.value);\n  };\n\n  const submitComment = (event) => {\n    event.preventDefault();\n    addComment({\n      name,\n      email,\n      body,\n      postId: selectedPostId,\n    })\n      .then(() => onRefreshDetails());\n    resetForm();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitComment}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => {\n            setValue(event, setName);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setValue(event, setEmail);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => {\n            setValue(event, setBody);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  onRefreshDetails: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPostComments, deleteComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [details, setDetails] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [isCommentsVisible, setCommentsVisible] = useState(true);\n  const [needRefresh, setRefresh] = useState(false);\n\n  const activateLoader = () => setLoading(true);\n  const deactivateLoader = () => setLoading(false);\n\n  const refresh = () => setRefresh(!needRefresh);\n\n  const loadAllDetails = () => {\n    getPostDetails(selectedPostId)\n      .then(setDetails);\n\n    getPostComments(selectedPostId)\n      .then(setComments)\n      .then(deactivateLoader);\n  };\n\n  const showComments = () => setCommentsVisible(true);\n  const hideComments = () => setCommentsVisible(false);\n\n  useEffect(loadAllDetails, []);\n\n  useEffect(() => {\n    activateLoader();\n    loadAllDetails();\n  }, [selectedPostId, needRefresh]);\n\n  return (\n    <>\n      {(!details || isLoading) ? (\n        <Loader />\n      ) : (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{details.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n\n            {!isCommentsVisible ? (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={showComments}\n              >\n                Show comments\n              </button>\n            ) : (\n              <>\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={hideComments}\n                >\n                  Hide comments\n                </button>\n                <ul className=\"PostDetails__list\">\n                  {comments.map(comment => (\n                    <li\n                      key={comment.id}\n                      className=\"PostDetails__list-item\"\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => {\n                          deleteComment(comment.id)\n                            .then(refresh);\n                        }}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                selectedPostId={selectedPostId}\n                onRefreshDetails={refresh}\n              />\n            </div>\n          </section>\n        </div>\n      )}\n    </>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [selectedUserId, setSelectedUserId] = useState('0');\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const handleSelect = (event) => {\n    event.preventDefault();\n    setSelectedUserId(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={handleSelect}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {Boolean(selectedPostId)\n            && (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n            )\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}